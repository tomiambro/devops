name: "Terraform"

on:
  # Uncomment to enable staging deploy from main
  # push:
  #   branches:
  #     - main
  release:
    types: [published]
  pull_request:

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  terraform:
    name: "Terraform"
    permissions: write-all
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::237435794960:role/Cognito_githubactionsAuth_Role
          role-session-name: samplerolesession
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.0
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        # Route 53 zone must already exist for this to succeed!
        run: ""::set-output name=PLAN::$(terraform plan -var pipeline=true -no-color)"
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.PLAN }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log(${{ steps.plan.outputs.PLAN }});
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

#       - uses: actions/setup-go@v2
#         with:
#           go-version: '^1.15.5'
          
#       - name : Terratest Execution
#         if: github.event_name == 'pull_request'
#         working-directory: 08-testing/tests/terratest
#         run: |
#           go test . -v timeout 10m

#       - name: Check tag
#         id: check-tag
#         run: |
#           if [[ ${{ github.ref }} =~ ^refs\/tags\/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then echo ::set-output name=environment::production
#           elif [[ ${{ github.ref }} == 'refs/heads/main' ]]; then echo ::set-output name=environment::staging
#           else echo ::set-output name=environment::unknown
#           fi

#       - name: Terraform Apply Global
#         if: github.event_name == 'push' || github.event_name == 'release'
#         working-directory: 07-managing-multiple-environments/file-structure/global
#         run: |
#           terraform init
#           terraform apply -auto-approve

#       - name: Terraform Apply Staging
#         if: steps.check-tag.outputs.environment == 'staging' && github.event_name == 'push'
#         run: terraform apply -var db_pass=${{secrets.DB_PASS }} -auto-approve

#       - name: Terraform Apply Production
#         if: steps.check-tag.outputs.environment == 'production' && github.event_name == 'release'
#         working-directory: 07-managing-multiple-environments/file-structure/production
#         run: |
#           terraform init
#           terraform apply -var db_pass=${{secrets.DB_PASS }} -auto-approve